import torch

n_step = 1    # 预测步数

# VGG16
layer0_w = torch.zeros((3, 64, 3, 3, 3))
layer0_b = torch.zeros((64 ,3))
layer1_w = torch.zeros((3, 64))
layer1_b = torch.zeros((64 ,3))
layer2_w = torch.zeros((3, 64, 64, 3, 3))
layer2_b = torch.zeros((64 ,3))
layer3_w = torch.zeros((3, 64))
layer3_b = torch.zeros((64 ,3))
layer4_w = torch.zeros((3, 128, 64, 3, 3))
layer4_b = torch.zeros((128 ,3))
layer5_w = torch.zeros((3, 128))
layer5_b = torch.zeros((128 ,3))
layer6_w = torch.zeros((3, 128, 128, 3, 3))
layer6_b = torch.zeros((128 ,3))
layer7_w = torch.zeros((3, 128))
layer7_b = torch.zeros((128 ,3))
layer8_w = torch.zeros((3, 256, 128, 3, 3))
layer8_b = torch.zeros((256 ,3))
layer9_w = torch.zeros((3, 256))
layer9_b = torch.zeros((256 ,3))
layer10_w = torch.zeros((3, 256, 256, 3, 3))
layer10_b = torch.zeros((256 ,3))
layer11_w = torch.zeros((3, 256))
layer11_b = torch.zeros((256 ,3))
layer12_w = torch.zeros((3, 256, 256, 3, 3))
layer12_b = torch.zeros((256 ,3))
layer13_w = torch.zeros((3, 256))
layer13_b = torch.zeros((256 ,3))
layer14_w = torch.zeros((3, 512, 256, 3, 3))
layer14_b = torch.zeros((512 ,3))
layer15_w = torch.zeros((3, 512))
layer15_b = torch.zeros((512 ,3))
layer16_w = torch.zeros((3, 512, 512, 3, 3))
layer16_b = torch.zeros((512 ,3))
layer17_w = torch.zeros((3, 512))
layer17_b = torch.zeros((512 ,3))
layer18_w = torch.zeros((3, 512, 512, 3, 3))
layer18_b = torch.zeros((512 ,3))
layer19_w = torch.zeros((3, 512))
layer19_b = torch.zeros((512 ,3))
layer20_w = torch.zeros((3, 512, 512, 3, 3))
layer20_b = torch.zeros((512 ,3))
layer21_w = torch.zeros((3, 512))
layer21_b = torch.zeros((512 ,3))
layer22_w = torch.zeros((3, 512, 512, 3, 3))
layer22_b = torch.zeros((512 ,3))
layer23_w = torch.zeros((3, 512))
layer23_b = torch.zeros((512 ,3))
layer24_w = torch.zeros((3, 512, 512, 3, 3))
layer24_b = torch.zeros((512 ,3))
layer25_w = torch.zeros((3, 512))
layer25_b = torch.zeros((512 ,3))
layer26_w = torch.zeros((3, 4096, 512))
layer26_b = torch.zeros((4096 ,3))
layer27_w = torch.zeros((3, 4096, 4096))
layer27_b = torch.zeros((4096 ,3))
layer28_w = torch.zeros((3, 100, 4096))
layer28_b = torch.zeros((100 ,3))

layer_wlist = [globals()[f"layer{i}_w"] for i in range(29)]
layer_blist = [globals()[f"layer{i}_b"] for i in range(29)]

# # resnet18
# layer0_w = torch.zeros((3, 64, 3, 3, 3))
# layer1_w = torch.zeros((3, 64))
# layer1_b = torch.zeros((64, 3))
# layer2_w = torch.zeros((3, 64, 64, 3, 3))
# layer3_w = torch.zeros((3, 64))
# layer3_b = torch.zeros((64, 3))
# layer4_w = torch.zeros((3, 64, 64, 3, 3))
# layer5_w = torch.zeros((3, 64))
# layer5_b = torch.zeros((64, 3))
# layer6_w = torch.zeros((3, 64, 64, 3, 3))
# layer7_w = torch.zeros((3, 64))
# layer7_b = torch.zeros((64, 3))
# layer8_w = torch.zeros((3, 64, 64, 3, 3))
# layer9_w = torch.zeros((3, 64))
# layer9_b = torch.zeros((64, 3))
# layer10_w = torch.zeros((3, 128, 64, 3, 3))
# layer11_w = torch.zeros((3, 128))
# layer11_b = torch.zeros((128, 3))
# layer12_w = torch.zeros((3, 128, 128, 3, 3))
# layer13_w = torch.zeros((3, 128))
# layer13_b = torch.zeros((128, 3))
# layer14_w = torch.zeros((3, 128, 64, 1, 1))
# layer15_w = torch.zeros((3, 128))
# layer15_b = torch.zeros((128, 3))
# layer16_w = torch.zeros((3, 128, 128, 3, 3))
# layer17_w = torch.zeros((3, 128))
# layer17_b = torch.zeros((128, 3))
# layer18_w = torch.zeros((3, 128, 128, 3, 3))
# layer19_w = torch.zeros((3, 128))
# layer19_b = torch.zeros((128, 3))
# layer20_w = torch.zeros((3, 256, 128, 3, 3))
# layer21_w = torch.zeros((3, 256))
# layer21_b = torch.zeros((256, 3))
# layer22_w = torch.zeros((3, 256, 256, 3, 3))
# layer23_w = torch.zeros((3, 256))
# layer23_b = torch.zeros((256, 3))
# layer24_w = torch.zeros((3, 256, 128, 1, 1))
# layer25_w = torch.zeros((3, 256))
# layer25_b = torch.zeros((256, 3))
# layer26_w = torch.zeros((3, 256, 256, 3, 3))
# layer27_w = torch.zeros((3, 256))
# layer27_b = torch.zeros((256, 3))
# layer28_w = torch.zeros((3, 256, 256, 3, 3))
# layer29_w = torch.zeros((3, 256))
# layer29_b = torch.zeros((256, 3))
# layer30_w = torch.zeros((3, 512, 256, 3, 3))
# layer31_w = torch.zeros((3, 512))
# layer31_b = torch.zeros((512, 3))
# layer32_w = torch.zeros((3, 512, 512, 3, 3))
# layer33_w = torch.zeros((3, 512))
# layer33_b = torch.zeros((512, 3))
# layer34_w = torch.zeros((3, 512, 256, 1, 1))
# layer35_w = torch.zeros((3, 512))
# layer35_b = torch.zeros((512, 3))
# layer36_w = torch.zeros((3, 512, 512, 3, 3))
# layer37_w = torch.zeros((3, 512))
# layer37_b = torch.zeros((512, 3))
# layer38_w = torch.zeros((3, 512, 512, 3, 3))
# layer39_w = torch.zeros((3, 512))
# layer39_b = torch.zeros((512, 3))
# layer40_w = torch.zeros((3, 100, 512))
# layer40_b = torch.zeros((100, 3))
#
# layer_wlist = [globals()[f"layer{i}_w"] for i in range(41)]
# layer_blist = [globals()[f"layer{i}_b"] for i in range(1, 41, 2)]
# layer_blist.append(layer40_b)

# # googlenet
# layer0_w = torch.zeros((3, 64, 3, 3, 3))
# layer1_w =torch.zeros((3, 64))
# layer1_b = torch.zeros((64 ,3))
# layer2_w = torch.zeros((3, 64, 64, 3, 3))
# layer3_w =torch.zeros((3, 64))
# layer3_b = torch.zeros((64 ,3))
# layer4_w = torch.zeros((3, 192, 64, 3, 3))
# layer5_w =torch.zeros((3, 192))
# layer5_b = torch.zeros((192 ,3))
# layer6_w = torch.zeros((3, 64, 192, 1, 1))
# layer6_b = torch.zeros((64 ,3))
# layer7_w =torch.zeros((3, 64))
# layer7_b =torch.zeros((64 ,3))
# layer8_w =torch.zeros((3, 96, 192, 1, 1))
# layer8_b =torch.zeros((96 ,3))
# layer9_w =torch.zeros((3, 96))
# layer9_b =torch.zeros((96 ,3))
# layer10_w =torch.zeros((3, 128, 96, 3, 3))
# layer10_b =torch.zeros((128 ,3))
# layer11_w =torch.zeros((3, 128))
# layer11_b =torch.zeros((128 ,3))
# layer12_w =torch.zeros((3, 16, 192, 1, 1))
# layer12_b =torch.zeros((16 ,3))
# layer13_w =torch.zeros((3, 16))
# layer13_b =torch.zeros((16 ,3))
# layer14_w =torch.zeros((3, 32, 16, 3, 3))
# layer14_b =torch.zeros((32 ,3))
# layer15_w =torch.zeros((3, 32))
# layer15_b =torch.zeros((32 ,3))
# layer16_w =torch.zeros((3, 32, 32, 3, 3))
# layer16_b =torch.zeros((32 ,3))
# layer17_w =torch.zeros((3, 32))
# layer17_b =torch.zeros((32 ,3))
# layer18_w =torch.zeros((3, 32, 192, 1, 1))
# layer18_b =torch.zeros((32 ,3))
# layer19_w =torch.zeros((3, 32))
# layer19_b =torch.zeros((32 ,3))
# layer20_w =torch.zeros((3, 128, 256, 1, 1))
# layer20_b =torch.zeros((128 ,3))
# layer21_w =torch.zeros((3, 128))
# layer21_b =torch.zeros((128 ,3))
# layer22_w =torch.zeros((3, 128, 256, 1, 1))
# layer22_b =torch.zeros((128 ,3))
# layer23_w =torch.zeros((3, 128))
# layer23_b =torch.zeros((128 ,3))
# layer24_w =torch.zeros((3, 192, 128, 3, 3))
# layer24_b =torch.zeros((192 ,3))
# layer25_w =torch.zeros((3, 192))
# layer25_b =torch.zeros((192 ,3))
# layer26_w =torch.zeros((3, 32, 256, 1, 1))
# layer26_b =torch.zeros((32 ,3))
# layer27_w =torch.zeros((3, 32))
# layer27_b =torch.zeros((32 ,3))
# layer28_w =torch.zeros((3, 96, 32, 3, 3))
# layer28_b =torch.zeros((96 ,3))
# layer29_w =torch.zeros((3, 96))
# layer29_b =torch.zeros((96 ,3))
# layer30_w =torch.zeros((3, 96, 96, 3, 3))
# layer30_b =torch.zeros((96 ,3))
# layer31_w =torch.zeros((3, 96))
# layer31_b =torch.zeros((96 ,3))
# layer32_w =torch.zeros((3, 64, 256, 1, 1))
# layer32_b =torch.zeros((64 ,3))
# layer33_w =torch.zeros((3, 64))
# layer33_b =torch.zeros((64 ,3))
# layer34_w =torch.zeros((3, 192, 480, 1, 1))
# layer34_b =torch.zeros((192 ,3))
# layer35_w =torch.zeros((3, 192))
# layer35_b =torch.zeros((192 ,3))
# layer36_w =torch.zeros((3, 96, 480, 1, 1))
# layer36_b =torch.zeros((96 ,3))
# layer37_w =torch.zeros((3, 96))
# layer37_b =torch.zeros((96 ,3))
# layer38_w =torch.zeros((3, 208, 96, 3, 3))
# layer38_b =torch.zeros((208 ,3))
# layer39_w =torch.zeros((3, 208))
# layer39_b =torch.zeros((208 ,3))
# layer40_w =torch.zeros((3, 16, 480, 1, 1))
# layer40_b =torch.zeros((16 ,3))
# layer41_w =torch.zeros((3, 16))
# layer41_b =torch.zeros((16 ,3))
# layer42_w =torch.zeros((3, 48, 16, 3, 3))
# layer42_b =torch.zeros((48 ,3))
# layer43_w =torch.zeros((3, 48))
# layer43_b =torch.zeros((48 ,3))
# layer44_w =torch.zeros((3, 48, 48, 3, 3))
# layer44_b =torch.zeros((48 ,3))
# layer45_w =torch.zeros((3, 48))
# layer45_b =torch.zeros((48 ,3))
# layer46_w =torch.zeros((3, 64, 480, 1, 1))
# layer46_b =torch.zeros((64 ,3))
# layer47_w =torch.zeros((3, 64))
# layer47_b =torch.zeros((64 ,3))
# layer48_w =torch.zeros((3, 160, 512, 1, 1))
# layer48_b =torch.zeros((160 ,3))
# layer49_w =torch.zeros((3, 160))
# layer49_b =torch.zeros((160 ,3))
# layer50_w =torch.zeros((3, 112, 512, 1, 1))
# layer50_b =torch.zeros((112 ,3))
# layer51_w =torch.zeros((3, 112))
# layer51_b =torch.zeros((112 ,3))
# layer52_w =torch.zeros((3, 224, 112, 3, 3))
# layer52_b =torch.zeros((224 ,3))
# layer53_w =torch.zeros((3, 224))
# layer53_b =torch.zeros((224 ,3))
# layer54_w =torch.zeros((3, 24, 512, 1, 1))
# layer54_b =torch.zeros((24 ,3))
# layer55_w =torch.zeros((3, 24))
# layer55_b =torch.zeros((24 ,3))
# layer56_w =torch.zeros((3, 64, 24, 3, 3))
# layer56_b =torch.zeros((64 ,3))
# layer57_w =torch.zeros((3, 64))
# layer57_b =torch.zeros((64 ,3))
# layer58_w =torch.zeros((3, 64, 64, 3, 3))
# layer58_b =torch.zeros((64 ,3))
# layer59_w =torch.zeros((3, 64))
# layer59_b =torch.zeros((64 ,3))
# layer60_w =torch.zeros((3, 64, 512, 1, 1))
# layer60_b =torch.zeros((64 ,3))
# layer61_w =torch.zeros((3, 64))
# layer61_b =torch.zeros((64 ,3))
# layer62_w =torch.zeros((3, 128, 512, 1, 1))
# layer62_b =torch.zeros((128 ,3))
# layer63_w =torch.zeros((3, 128))
# layer63_b =torch.zeros((128 ,3))
# layer64_w =torch.zeros((3, 128, 512, 1, 1))
# layer64_b =torch.zeros((128 ,3))
# layer65_w =torch.zeros((3, 128))
# layer65_b =torch.zeros((128 ,3))
# layer66_w =torch.zeros((3, 256, 128, 3, 3))
# layer66_b =torch.zeros((256 ,3))
# layer67_w =torch.zeros((3, 256))
# layer67_b =torch.zeros((256 ,3))
# layer68_w =torch.zeros((3, 24, 512, 1, 1))
# layer68_b =torch.zeros((24 ,3))
# layer69_w =torch.zeros((3, 24))
# layer69_b =torch.zeros((24 ,3))
# layer70_w =torch.zeros((3, 64, 24, 3, 3))
# layer70_b =torch.zeros((64 ,3))
# layer71_w =torch.zeros((3, 64))
# layer71_b =torch.zeros((64 ,3))
# layer72_w =torch.zeros((3, 64, 64, 3, 3))
# layer72_b =torch.zeros((64 ,3))
# layer73_w =torch.zeros((3, 64))
# layer73_b =torch.zeros((64 ,3))
# layer74_w =torch.zeros((3, 64, 512, 1, 1))
# layer74_b =torch.zeros((64 ,3))
# layer75_w =torch.zeros((3, 64))
# layer75_b =torch.zeros((64 ,3))
# layer76_w =torch.zeros((3, 112, 512, 1, 1))
# layer76_b =torch.zeros((112 ,3))
# layer77_w =torch.zeros((3, 112))
# layer77_b =torch.zeros((112 ,3))
# layer78_w =torch.zeros((3, 144, 512, 1, 1))
# layer78_b =torch.zeros((144 ,3))
# layer79_w =torch.zeros((3, 144))
# layer79_b =torch.zeros((144 ,3))
# layer80_w =torch.zeros((3, 288, 144, 3, 3))
# layer80_b =torch.zeros((288 ,3))
# layer81_w =torch.zeros((3, 288))
# layer81_b =torch.zeros((288 ,3))
# layer82_w =torch.zeros((3, 32, 512, 1, 1))
# layer82_b =torch.zeros((32 ,3))
# layer83_w =torch.zeros((3, 32))
# layer83_b =torch.zeros((32 ,3))
# layer84_w =torch.zeros((3, 64, 32, 3, 3))
# layer84_b =torch.zeros((64 ,3))
# layer85_w =torch.zeros((3, 64))
# layer85_b =torch.zeros((64 ,3))
# layer86_w =torch.zeros((3, 64, 64, 3, 3))
# layer86_b =torch.zeros((64 ,3))
# layer87_w =torch.zeros((3, 64))
# layer87_b =torch.zeros((64 ,3))
# layer88_w =torch.zeros((3, 64, 512, 1, 1))
# layer88_b =torch.zeros((64 ,3))
# layer89_w =torch.zeros((3, 64))
# layer89_b =torch.zeros((64 ,3))
# layer90_w =torch.zeros((3, 256, 528, 1, 1))
# layer90_b =torch.zeros((256 ,3))
# layer91_w =torch.zeros((3, 256))
# layer91_b =torch.zeros((256 ,3))
# layer92_w =torch.zeros((3, 160, 528, 1, 1))
# layer92_b =torch.zeros((160 ,3))
# layer93_w =torch.zeros((3, 160))
# layer93_b =torch.zeros((160 ,3))
# layer94_w =torch.zeros((3, 320, 160, 3, 3))
# layer94_b =torch.zeros((320 ,3))
# layer95_w =torch.zeros((3, 320))
# layer95_b =torch.zeros((320 ,3))
# layer96_w =torch.zeros((3, 32, 528, 1, 1))
# layer96_b =torch.zeros((32 ,3))
# layer97_w =torch.zeros((3, 32))
# layer97_b =torch.zeros((32 ,3))
# layer98_w =torch.zeros((3, 128, 32, 3, 3))
# layer98_b =torch.zeros((128 ,3))
# layer99_w =torch.zeros((3, 128))
# layer99_b =torch.zeros((128 ,3))
# layer100_w =torch.zeros((3, 128, 128, 3, 3))
# layer100_b =torch.zeros((128 ,3))
# layer101_w =torch.zeros((3, 128))
# layer101_b =torch.zeros((128 ,3))
# layer102_w =torch.zeros((3, 128, 528, 1, 1))
# layer102_b =torch.zeros((128 ,3))
# layer103_w =torch.zeros((3, 128))
# layer103_b =torch.zeros((128 ,3))
# layer104_w =torch.zeros((3, 256, 832, 1, 1))
# layer104_b =torch.zeros((256 ,3))
# layer105_w =torch.zeros((3, 256))
# layer105_b =torch.zeros((256 ,3))
# layer106_w =torch.zeros((3, 160, 832, 1, 1))
# layer106_b =torch.zeros((160 ,3))
# layer107_w =torch.zeros((3, 160))
# layer107_b =torch.zeros((160 ,3))
# layer108_w =torch.zeros((3, 320, 160, 3, 3))
# layer108_b =torch.zeros((320 ,3))
# layer109_w =torch.zeros((3, 320))
# layer109_b =torch.zeros((320 ,3))
# layer110_w =torch.zeros((3, 32, 832, 1, 1))
# layer110_b =torch.zeros((32 ,3))
# layer111_w =torch.zeros((3, 32))
# layer111_b =torch.zeros((32 ,3))
# layer112_w =torch.zeros((3, 128, 32, 3, 3))
# layer112_b =torch.zeros((128 ,3))
# layer113_w =torch.zeros((3, 128))
# layer113_b =torch.zeros((128 ,3))
# layer114_w =torch.zeros((3, 128, 128, 3, 3))
# layer114_b =torch.zeros((128 ,3))
# layer115_w =torch.zeros((3, 128))
# layer115_b =torch.zeros((128 ,3))
# layer116_w =torch.zeros((3, 128, 832, 1, 1))
# layer116_b =torch.zeros((128 ,3))
# layer117_w =torch.zeros((3, 128))
# layer117_b =torch.zeros((128 ,3))
# layer118_w =torch.zeros((3, 384, 832, 1, 1))
# layer118_b =torch.zeros((384 ,3))
# layer119_w =torch.zeros((3, 384))
# layer119_b =torch.zeros((384 ,3))
# layer120_w =torch.zeros((3, 192, 832, 1, 1))
# layer120_b =torch.zeros((192 ,3))
# layer121_w =torch.zeros((3, 192))
# layer121_b =torch.zeros((192 ,3))
# layer122_w =torch.zeros((3, 384, 192, 3, 3))
# layer122_b =torch.zeros((384 ,3))
# layer123_w =torch.zeros((3, 384))
# layer123_b =torch.zeros((384 ,3))
# layer124_w =torch.zeros((3, 48, 832, 1, 1))
# layer124_b =torch.zeros((48 ,3))
# layer125_w =torch.zeros((3, 48))
# layer125_b =torch.zeros((48 ,3))
# layer126_w =torch.zeros((3, 128, 48, 3, 3))
# layer126_b =torch.zeros((128 ,3))
# layer127_w =torch.zeros((3, 128))
# layer127_b =torch.zeros((128 ,3))
# layer128_w =torch.zeros((3, 128, 128, 3, 3))
# layer128_b =torch.zeros((128 ,3))
# layer129_w =torch.zeros((3, 128))
# layer129_b =torch.zeros((128 ,3))
# layer130_w =torch.zeros((3, 128, 832, 1, 1))
# layer130_b =torch.zeros((128 ,3))
# layer131_w =torch.zeros((3, 128))
# layer131_b =torch.zeros((128 ,3))
# layer132_w =torch.zeros((3, 100, 1024))
# layer132_b =torch.zeros((100 ,3))
#
# # layer_wlist = [globals()[f"layer{i}_w"] for i in range(133)]
# # layer_blist = [layer1_b, layer3_b, layer5_b]
# # layer_blist.append(globals()[f"layer{i}_b"] for i in range(6, 133))
# param_list = [layer0_w, layer1_w, layer1_b, layer2_w, layer3_w, layer3_b, layer4_w, layer5_w, layer5_b, layer6_w,
#               layer6_b, layer7_w, layer7_b, layer8_w, layer8_b, layer9_w, layer9_b, layer10_w, layer10_b, layer11_w,
#               layer11_b, layer12_w, layer12_b, layer13_w, layer13_b, layer14_w, layer14_b, layer15_w, layer15_b, layer16_w,
#               layer16_b, layer17_w, layer17_b, layer18_w, layer18_b, layer19_w, layer19_b, layer20_w, layer20_b,
#               layer21_w, layer21_b, layer22_w, layer22_b, layer23_w, layer23_b, layer24_w, layer24_b, layer25_w,
#               layer25_b, layer26_w, layer26_b, layer27_w, layer27_b, layer28_w, layer28_b, layer29_w, layer29_b,
#               layer30_w, layer30_b, layer31_w, layer31_b, layer32_w, layer32_b, layer33_w, layer33_b, layer34_w,
#               layer34_b, layer35_w, layer35_b, layer36_w, layer36_b, layer37_w, layer37_b, layer38_w, layer38_b,
#               layer39_w, layer39_b, layer40_w, layer40_b, layer41_w, layer41_b, layer42_w, layer42_b, layer43_w,
#               layer43_b, layer44_w, layer44_b, layer45_w, layer45_b, layer46_w, layer46_b, layer47_w, layer47_b,
#               layer48_w, layer48_b, layer49_w, layer49_b, layer50_w, layer50_b, layer51_w, layer51_b, layer52_w,
#               layer52_b, layer53_w, layer53_b, layer54_w, layer54_b, layer55_w, layer55_b, layer56_w, layer56_b,
#               layer57_w, layer57_b, layer58_w, layer58_b, layer59_w, layer59_b, layer60_w, layer60_b, layer61_w,
#               layer61_b, layer62_w, layer62_b, layer63_w, layer63_b, layer64_w, layer64_b, layer65_w, layer65_b,
#               layer66_w, layer66_b, layer67_w, layer67_b, layer68_w, layer68_b, layer69_w, layer69_b, layer70_w,
#               layer70_b, layer71_w, layer71_b, layer72_w, layer72_b, layer73_w, layer73_b, layer74_w, layer74_b,
#               layer75_w, layer75_b, layer76_w, layer76_b, layer77_w, layer77_b, layer78_w, layer78_b, layer79_w,
#               layer79_b, layer80_w, layer80_b, layer81_w, layer81_b, layer82_w, layer82_b, layer83_w, layer83_b,
#               layer84_w, layer84_b, layer85_w, layer85_b, layer86_w, layer86_b, layer87_w, layer87_b, layer88_w,
#               layer88_b, layer89_w, layer89_b, layer90_w, layer90_b, layer91_w, layer91_b, layer92_w, layer92_b,
#               layer93_w, layer93_b, layer94_w, layer94_b, layer95_w, layer95_b, layer96_w, layer96_b, layer97_w,
#               layer97_b, layer98_w, layer98_b, layer99_w, layer99_b, layer100_w, layer100_b, layer101_w, layer101_b,
#               layer102_w, layer102_b, layer103_w, layer103_b, layer104_w, layer104_b, layer105_w, layer105_b,
#               layer106_w, layer106_b, layer107_w, layer107_b, layer108_w, layer108_b, layer109_w, layer109_b,
#               layer110_w, layer110_b, layer111_w, layer111_b, layer112_w, layer112_b, layer113_w, layer113_b,
#               layer114_w, layer114_b, layer115_w, layer115_b, layer116_w, layer116_b, layer117_w, layer117_b,
#               layer118_w, layer118_b, layer119_w, layer119_b, layer120_w, layer120_b, layer121_w, layer121_b,
#               layer122_w, layer122_b, layer123_w, layer123_b, layer124_w, layer124_b, layer125_w, layer125_b,
#               layer126_w, layer126_b, layer127_w, layer127_b, layer128_w, layer128_b, layer129_w, layer129_b,
#               layer130_w, layer130_b, layer131_w, layer131_b, layer132_w, layer132_b]
# # param_list += [globals()[f"layer{i}_w"] for i in range(6, 133)] + [globals()[f"layer{i}_b"] for i in range(6, 133)]
# w_position_list = [0, 1, 3, 4, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47,
#                    49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95,
#                    97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135,
#                    137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173,
#                    175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211,
#                    213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249,
#                    251, 253, 255, 257, 259, 261]
# b_position_list = [2, 5, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52,
#                    54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100,
#                    102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138,
#                    140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176,
#                    178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214,
#                    216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252,
#                    254, 256, 258, 260, 262]

def n_step_predict(paramA, paramB, paramC):
    # 求中点坐标
    y_m_ab = (paramA + paramB) / 2
    y_m_bc = (paramB + paramC) / 2
    # 求斜率
    k_midline = y_m_bc - y_m_ab
    # 输出单步预测
    param_predict = y_m_bc + n_step*k_midline

    return param_predict
